/* REGION LOG HELPER */
def logSuccess(String text) {
    println("SUCCESS: ${text}")
}

def logWarning(String text) {
    println("WARNING: ${text}")
}

def logInfo(String text) {
    println("INFO: ${text}")
}

static def logError(String text) {
    throw new GradleException("************** ${text} **********************")
}
/* END REGION */

/* REGION TASKS */
tasks.register('code.prettier', Exec) {
    description = "Code prettier"
    group = "_system"
    doFirst {
        logInfo("code prettier")
        workingDir = "$projectDir"
        commandLine 'npm', 'run', 'prettier'
    }
}
tasks.register('npm.install', Exec) {
    description = "Install npm"
    group = "_node"
    doFirst {
        logInfo("npm install")
        workingDir = "$projectDir"
        commandLine 'npm', 'ci'
    }
}
tasks.register('test', Exec) {
    description = "test"
    group = "_test"
    doFirst {
        logInfo("test")

        def language = project.findProperty('language')
        def platform = project.findProperty('platform')
        def buildType = project.findProperty('buildType')
        def flavorType = project.findProperty('flavorType')
        println("config:: language: $language, platform:$platform, buildType:$buildType, flavorType:$flavorType")

        def deviceName = project.findProperty('deviceName')
        def deviceOsVersion = project.findProperty('deviceOsVersion')
        def deviceSdkVersion = project.findProperty('deviceSdkVersion')
        println("deviceName:$deviceName, deviceOsVersion:$deviceOsVersion, deviceSdkVersion:$deviceSdkVersion")

        def appVersion = project.findProperty('appVersion')
        def appPath = project.findProperty('appPath')
        def appFile = project.findProperty('appFile')
        println("config:: appVersion: $appVersion, appPath: $appPath, appFile: $appFile")

        def tags = project.findProperty('tags')
        println("config:: tags: $tags")

        workingDir = "$projectDir"
        environment 'PLATFORM', platform
        environment 'LANGUAGE', language
        environment 'BUILD_TYPE', buildType
        environment 'FLAVOR_TYPE', flavorType
        if (deviceName != null) {
            environment 'DEVICE_NAME', deviceName
        }
        if (deviceSdkVersion != null) {
            environment 'DEVICE_SDK_VERSION', deviceSdkVersion
        }
        if (deviceOsVersion != null) {
            environment 'DEVICE_OS_VERSION', deviceOsVersion
        }
        if (appVersion != null) {
            environment 'APP_VERSION', appVersion
        }
        if (appPath != null && appFile != null) {
            environment 'APP_PATH', "${appPath}/${appFile}"
        }
        if (tags != null) {
            environment 'TAGS', "--verbose --grep ${tags}"
        }
        commandLine 'npm', 'run', 'test'
    }
}
tasks.register('allure.generate', Exec) {
    description = "Allure generate"
    group = "_report"
    doFirst {
        logInfo("allure generate")
        workingDir = "$projectDir"
        commandLine 'npm', 'run', 'allure:generate'
    }
}
/* END REGION */
